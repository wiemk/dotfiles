#!/usr/bin/env bash
# shellcheck shell=bash

# shellcheck source=../../lib/common.sh
source "${0%/*}/../share/dotfiles/lib/common.sh" || exit 1

usage() {
	cat <<EOF
	Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-p] <directory>

	Update all git repositories below given directory

	Available options:

	-h, --help      Print this help and exit
	-p, --parallel  Update in parallel
	-j  --jobs      Number of jobs when parallel (default 16)
	-d  --depth     Recursion depth
EOF
	exit
}

if _has parallel; then
	GNU_PARALLEL=1
fi

parse() {
	declare -g flag_parallel=0
	declare -g flag_jobs=16
	declare -g flag_depth=2
	declare -g flag_quiet=0

	while :; do
		case ${1-} in
			-h | --help) usage ;;
			-v | --verbose) set -x ;;
			--no-color) NO_COLOR=1 ;;
			-p | --parallel) flag_parallel=1 ;;
			-q | --quiet) flag_quiet=1 ;;
			-j | --jobs)
				flag_jobs=${2-}
				shift
				;;
			-d | --depth)
				flag_depth=${2-}
				shift
				;;
			-?*) _die "Unknown option: ${1}" ;;
			*) break ;;
		esac
		shift
	done

	argv=("$@")
	[[ ${#argv[@]} -eq 0 ]] && _die 'Missing script arguments'

	return 0
}

# shellcheck disable=SC2034
colors() {
	set -a
	if [[ -t 2 ]] && [[ -z ${NO_COLOR-} ]] && [[ ${TERM-} != dumb ]]; then
		NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m'
		BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
	fi
	set +a
}

update() {
	# export variables because of invocation inside subshell
	if ((flag_quiet == 1)); then
		export GIT_QUIET=1
	fi
	export GIT_TERMINAL_PROMPT=0 GIT_CONFIG_GLOBAL=/dev/null
	git_pull() {
		if git -C "$1" config --get branch."$(git -C "$1" symbolic-ref --short HEAD)".remote &>/dev/null; then
			# Redirection order is intentional: suppress git errors and redirect stdout to stderr
			# shellcheck disable=SC2069
			if ! git -C "$1" -c color.ui=always -c http.lowSpeedLimit=1000 -c http.lowSpeedTime=5 pull \
				${GIT_QUIET:+'-q'} --rebase 2>&1 2>/dev/null; then
				printf "${RED}╠═[ERROR]: %s${NOFORMAT}\n" "${1##*/}" >&2
			fi
		else
			printf "${BLUE}╠═[INFO]: No remote configured for %s${NOFORMAT}\n" "${1##*/}" >&2
		fi
	}
	export -f git_pull

	if ((flag_parallel == 0)); then
		find "${argv[0]}" -maxdepth "${flag_depth}" -name '.git' -prune -type d -exec \
			bash -c 'c=$(readlink -en -- "${1}/.."); printf "${PURPLE}╠%s${NOFORMAT}\n" "${c##*/}"; git_pull "$c"' shell {} \;
	elif ((GNU_PARALLEL == 1)); then
		find "${argv[0]}" -maxdepth "${flag_depth}" -name '.git' -prune -type d -printf '%h\0' \
			| parallel -0 -j "$flag_jobs" --keep-order "printf \"${PURPLE}╠%s${NOFORMAT}\n\" {}; git_pull {}"
	else
		find "${argv[0]}" -maxdepth "${flag_depth}" -name '.git' -prune -type d -printf '%h\0' \
			| xargs -0 -I{} -P "$flag_jobs" sh -c "printf \"${PURPLE}╠%s${NOFORMAT}\n\" {}; git_pull {}"
	fi
}

parse "$@"
colors
update

# vi: set ft=sh ts=4 sw=0 sts=-1 sr noet nosi tw=80 fdm=manual: