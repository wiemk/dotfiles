# vi: set ft=gitconfig ts=2 sw=0 sts=-1 sr noet nosi tw=80 fdm=manual:

# rarely used aliase
[alias]
	ainit = "!git init && git add --all && git commit -m 'Initial commit'"
	amp = "!git commit --all --amend --no-edit && git push --force-with-lease"
	churn = "!sh -c 'git log --all -M -C --name-only --format='format:' "$@" | grep . | sort | uniq -c | sort -n -r'"
	expire = "!git reflog expire --expire=now --all && git gc --prune=now"
	export = "!touch \"$(git rev-parse --git-dir)/git-daemon-export-ok\""
	fetch-notes = "!git config --add remote.origin.fetch \"+refs/notes/*:refs/notes/*\" && git fetch origin"
	fetch-pr = "!git config --add remote.origin.fetch \"+refs/pull/*/head:refs/remotes/pr/*\" && git fetch origin"
	ftime = "!date +'--date=%s' -r"
	lost = "!git fsck | awk '/dangling commit/ {print $3 \"^!\"}' | xargs git log"
	lsb = "!git ls-tree -r -t -l --full-name HEAD | sort -n -k 4 | tail -n 10"
	lsr = "!_() { [ \"$1\" ] || set -- HEAD; git ls-tree -r \"$@\"; }; _"
	rg = "!_() { git rev-list --topo-order --abbrev-commit --glob=\"refs/*/$(git name-rev --name-only HEAD)\" | xargs -- git grep -P \"$@\"; };_"
	rga = "!_() { git rev-list --all --topo-order --abbrev-commit | xargs -- git grep -P \"$@\"; };_"
	sd = "!_() { git stash drop stash@{${1:-0}}; };_"
	ss = "!_() { git stash show -p stash@{${1:-0}}; };_"
	unexport = "!set -x && rm -v \"$(git rev-parse --git-dir)/git-daemon-export-ok\""
	which = "!_() { git config --global --get alias.$1; };_"
	whoami = "!git var GIT_COMMITTER_IDENT | sed 's/>.*/>/'"

	# Fetch all or one remote:
	#   git f
	#   git f upstream
	f = "!sh -c 'git fetch --tags ${1:-\"--all\"}' -"

	# Interactive rebase against upstream HEAD or ref:
	#   git r
	#   git r HEAD~10
	r = "!sh -c 'git rebase -i ${1:-\"@{u}\"}' -"

	# Rebase against upstream HEAD or ref:
	#   git r
	#   git r HEAD~10
	rup = "!sh -c 'git rebase ${1:-\"@{u}\"}' -"

	# Hard reset to upstream or ref:
	#   git re
	#   git rh HEAD~1
	rh = "!sh -c 'git reset --hard ${1:-\"@{u}\"}' -"

	# Fast-forward merge upstream or ref:
	#   git up
	#   git up myremote/mybranch
	up = "!sh -c 'git merge --ff-only ${1:-\"@{u}\"}' -"

	# Make a stub commit with file and file contents. Useful for demoing.
	stub = "!sh -c 'echo $1 > $1; git add $1; git commit -m Add-$1' -"

	# Cherry-pick a commit directly into the working directory.
	cherry-patch = "!sh -c 'git show \"${1:?Missing revision}\" | git apply' -"

	# Perform a merge in-memory and output if conflicts are found (dry-run):
	#   git mergetest otherbranch
	mergetest = "!sh -c 'git merge-tree \
			$(git merge-base ${1:?Missing branch} HEAD) \
		${1:?Missing branch} HEAD \
		| awk '\\''/<<<<<<</ { print \"Conflicts found\"; exit 1 }'\\''' -"


	# Show the Git log and automatically shorten & search for a SHA:
	#   git lf deb8dff8d8c1ed8acb7d7a2ec1158e7db136aab3
	lf = "!sh -c 'GIT_PAGER=\"$PAGER -p $(git short $1)\" git l' -"
	ltf = "!sh -c 'GIT_PAGER=\"$PAGER -p $(git short $1)\" git lt' -"

	# Use sk to quickly filter available files.
	sk = "!git ls-files | sk"

	# Merge a GitHub pull request into the current branch.
	# Usage: git preq <preq>
	# Usage: git preq <preq> [<remote>]
	preq = "!sh -c 'git pull --no-ff ${2:-upstream} refs/pull/${1:?Missing preq}/head' -"
	# Same thing but for GitLab:
	mreq = "!sh -c 'git pull --no-ff ${2:-origin} refs/merge-requests/${1:?Missing preq}/head' -"

	# Make a local branch from a remote branch somewhere on GitHub.
	# Usage git ghbranch username reponame remotebranchname localbranchname
	ghbranch = "!sh -c 'git fetch git@github.com:${1:?Missing user}/\
		${2:?Missing repo}.git \
		${3:?Missing remote branch}:${4:?Missing local branch}' -"

	# Configure local clone to also make local refs for all GitHub pull
	# requests for the specified remote
	# Usage: git addrefspr upstream; git fetch upstream; git show upstream/pr/13
	addrefspr = "!sh -c 'git config --add \
		remote.${1:?Missing remote}.fetch \"+refs/pull/*/head:refs/remotes/$1/pr/*\"' -"