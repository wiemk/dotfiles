# vim: ft=tmux ts=4 sw=4 noet
# tmux version >= 2.6

# Version guards
run-shell 'tmux set-environment -g TMUX_VERSION $(tmux -V | cut -d" " -f2 | tr -d " |\-|.|[:alpha:]")'
run-shell "tmux set-environment -g TMUX_LOGIN_SHELL $(getent passwd $LOGNAME | cut -d: -f7)"
run-shell 'tmux set-environment -g TMUX_LOGIN_SHELL_BASE $(basename "$TMUX_LOGIN_SHELL")'

# Pretty 24-Bit colors
set-option -g default-terminal "tmux-256color"
set-option -as terminal-overrides ",*256col*:RGB:Tc,gnome*:RGB,alacritty:RGB,xterm-kitty:RGB"


## Styles

# Suppress errors for older tmux version
set-option -gq activity-action none
set-option -g assume-paste-time 2

set-option -g visual-activity off
set-option -g visual-silence off
set-option -g bell-action any

set-option -g focus-events on

set-option -g pane-border-style bg=default,fg=colour7
set-option -g pane-active-border-style bg=default,fg=colour6

set-option -g status-justify left
set-option -g status-interval 2
set-option -g status-position bottom
set-option -g status-style default,dim
set-option -g status-left ''
set-option -g status-right-length 50
set-option -g status-left-length 20
set-option -g status-right '#{?window_zoomed_flag,[#[bold]zoom#[default]] ,}#{?copy_cursor_y,[#[bold]copy#[default]] ,}#{?#{!=:#{client_key_table},root},[#[bold]#{=8:client_key_table}#[default]] ,}[#{USER}@#h:#S#{?session_grouped,/#{session_group},}] #{?#{||:#{window_zoomed_flag},#{||:#{copy_cursor_y},#{!=:#{client_key_table},root}}},,[%d/%m/%y #[bold]%H:%M #[default]%Z]}'

set-option -g message-style default,bold

set-option -gw mode-style default,bold
set-option -gw monitor-activity on
set-option -gw window-status-current-style default,bold
set-option -gw window-status-current-format "[#{?window_zoomed_flag,#[fg=colour6]#[underscore],}#I:#W#[default]]"
set-option -gw window-status-format "#{?pane_input_off,#[strikethrough],}#{?window_zoomed_flag,[#[fg=colour6]#[underscore],}#I:#{=12:window_name}#[default]"
set-option -gw window-status-bell-style "fg=colour6 bg=default bold"
set-option -gw window-status-activity-style "fg=colour7 bg=default"
set-option -gw window-status-separator ' '


## Functions

# Mouse
set-option -g mouse on

# Set fish as default shell for new windows
if-shell 'test -x /usr/bin/fish' 'set-option -g default-shell /usr/bin/fish'

# Larger history / scollbuffer
set-option -g history-limit 5000

# Start at 1 for easier access
set-option -g base-index 1

# Xterm style function key sequences for better text navigation
set-option -g xterm-keys on

# Toggle window renaming off
set-option -g allow-rename off

# Copy mode
set-option -gw mode-keys vi


## Key bindings

# Remap prefix from 'C-b' to 'C-q'
unbind-key C-q
set-option -g prefix C-q
bind-key C-q send-prefix

# Copy mode
unbind-key [
bind-key C-c copy-mode
bind-key C-p paste-buffer

# Manage the clipboard ourselves
set-option -s set-clipboard off

bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# Check for wayland
%if #{==:#{XDG_SESSION_TYPE},wayland}
	bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'wl-copy -o -f -t text/plain'
	bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe 'wl-copy -o -f -t text/plain'
%else
	bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -selection clipboard -in >/dev/null'
	bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe 'xclip -selection clipboard -in >/dev/null'
%endif

# Create new window at position if unoccupied
bind-key i command-prompt -p 'create window at:' 'new-window -t %1'
# Append new window and swap into the given position
bind-key I command-prompt -p 'insert window at:' 'new-window -a -t %1; swap-window -t -1'

# Swap windows
bind-key "'" command-prompt -p 'swap window with #:' 'swap-window -t %1'
bind-key * command-prompt -p 'swap window with #:' 'swap-window -t %1'

# Select / move window
bind-key '#' command-prompt -p 'index #:' "select-window -t ':%%'"
bind-key + command-prompt -p 'move window to #:' "move-window -t '%%'"

# Compact windows
bind-key '~' move-window -r\; display-message "windows compacted"

# New window next to current one in current path
bind-key C new-window -ac "#{pane_current_path}"

%if #{>=:#{TMUX_VERSION},32}
	bind-key B run-shell -C {
		new-window -ac "#{pane_current_path}" "exec #{TMUX_LOGIN_SHELL}" ; \
		set-option -w automatic-rename-format \
			"#{l:#{?#{!=:#{pane_current_command},#{TMUX_LOGIN_SHELL_BASE}},#{TMUX_LOGIN_SHELL_BASE}:,}}#{l:#{pane_current_command}}"
	}
	bind-key M-b run-shell -C {
		new-window -a "exec #{TMUX_LOGIN_SHELL}" ; \
		set-option -w automatic-rename-format \
			"#{l:#{?#{!=:#{pane_current_command},#{TMUX_LOGIN_SHELL_BASE}},#{TMUX_LOGIN_SHELL_BASE}:,}}#{l:#{pane_current_command}}"
	}
	bind-key M-B run-shell -C {
		new-window -c "#{pane_current_path}" "exec #{TMUX_LOGIN_SHELL}" ; \
		set-option -w automatic-rename-format \
			"#{l:#{?#{!=:#{pane_current_command},#{TMUX_LOGIN_SHELL_BASE}},#{TMUX_LOGIN_SHELL_BASE}:,}}#{l:#{pane_current_command}}"
	}
%else
	bind-key B run-shell {
		tmux new-window -ac "#{pane_current_path}" "exec #{TMUX_LOGIN_SHELL}" \; \
		set-option -w automatic-rename-format \
			"#{l:#{?#{!=:#{pane_current_command},#{TMUX_LOGIN_SHELL_BASE}},#{TMUX_LOGIN_SHELL_BASE}:,}}#{l:#{pane_current_command}}"
	}
	bind-key M-b run-shell {
		tmux new-window -a "exec #{TMUX_LOGIN_SHELL}" \; \
		set-option -w automatic-rename-format \
			"#{l:#{?#{!=:#{pane_current_command},#{TMUX_LOGIN_SHELL_BASE}},#{TMUX_LOGIN_SHELL_BASE}:,}}#{l:#{pane_current_command}}"
	}
	bind-key M-B run-shell {
		tmux new-window -c "#{pane_current_path}" "exec #{TMUX_LOGIN_SHELL}" \; \
		set-option -w automatic-rename-format \
			"#{l:#{?#{!=:#{pane_current_command},#{TMUX_LOGIN_SHELL_BASE}},#{TMUX_LOGIN_SHELL_BASE}:,}}#{l:#{pane_current_command}}"
	}
%endif

# New window next to current one
bind-key M-c new-window -a
# New window in current path
bind-key M-C new-window -c "#{pane_current_path}"


## Panes

# Move panes using arrow keys
bind-key M-k swap-pane -U
bind-key M-j swap-pane -D

# Split panes using | and -
bind-key | split-window -h
bind-key - split-window -v
unbind-key '"'
unbind-key %

# Lock/unlock pane
bind-key M-U select-pane -d
bind-key M-u select-pane -e

# Mark all windows as read
bind-key u kill-session -C

# Reload config files
bind-key R source-file ~/.tmux.conf\; source-file -q ~/.tmux.conf.local\; \
	display-message "Configuration reloaded!"

# Zoom
bind-key y resize-pane -Z

# Rebind window navigation to allow cycling through windows more rapidly
set-option -g repeat-time 500
bind-key -r n next-window
bind-key -r N previous-window
bind-key -r q next-window
bind-key -r Q previous-window
bind-key -r b previous-window

# Display panes
bind-key p display-panes 

# Reenable automatic window renaming
bind-key r set-option -w automatic-rename\; \
	display-message "automatic-rename is now #{?automatic-rename,on,off}"

# Bind kill-pane
bind-key k confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind-key x kill-pane
# Bind kill-window
bind-key K confirm-before -p "kill-window #W? (y/n)" kill-window
# Bind kill-session
bind-key M-k confirm-before -p "kill-session #S? (y/n)" kill-session

# Toggle activity notification for current window
bind-key a set-option -w monitor-activity\; \
	display-message "monitor-activity is now #{?monitor-activity,on,off}"

# Remove latency when pressing ESC in [n]vim
set-option -gs escape-time 0


# Switch panes using arrow keys
bind-key -n M-Left select-pane -L
bind-key -n M-Right select-pane -R
bind-key -n M-Up select-pane -U
bind-key -n M-Down select-pane -D

# Cycle through windows with mouse wheel
bind-key -n -r M-WheelDownPane next-window
bind-key -n -r M-WheelUpPane previous-window


## Submodes

# Layout submode, press any other key to exit
bind-key Z switch-client -T layout
bind-key -T layout k resize-pane -U \; switch-client -T layout
bind-key -T layout j resize-pane -D \; switch-client -T layout
bind-key -T layout h resize-pane -L \; switch-client -T layout
bind-key -T layout l resize-pane -R \; switch-client -T layout

bind-key -T layout K resize-pane -U 5 \; switch-client -T layout
bind-key -T layout J resize-pane -D 5 \; switch-client -T layout
bind-key -T layout H resize-pane -L 5 \; switch-client -T layout
bind-key -T layout L resize-pane -R 5 \; switch-client -T layout

bind-key -T layout + move-window -t +1 \; switch-client -T layout
bind-key -T layout - move-window -t -1 \; switch-client -T layout

# Tmux nesting
# We want to have single prefix key, usable both for local and remote session
# The idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session
bind-key -T root F12 \
	set-option prefix None \;\
	set-option key-table off \;\
	set-option status-position top \;\
	if-shell -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
	refresh-client -S \;\

bind-key -T off F12 \
	set-option -u prefix \;\
	set-option -u key-table \;\
	set-option -u status-position \;\
	refresh-client -S

## Local override
source-file -q ~/.tmux.conf.local

